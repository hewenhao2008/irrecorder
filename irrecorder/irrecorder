#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'json'
require 'csv'
require 'pry'
require 'serialport'
require 'colorize'
require_relative 'lib/irrecorder'

program :version, '0.0.1'
program :description, 'Infrared sequence recorder'

default_command :help

command :record do |c|
  c.syntax = "irrecorder record [options] [input_file | command list (when input_format set to ARGS) ]"
  c.summary = 'Config keys to be recorded'
  c.description = <<-END
      Config keys to be recorded
      The keys could be enter follow command or load from files or standard input
  END
  # c.example 'Load from YAML', "irrecorder"
  c.option '-i', '--input_format <format>', String, 'Input format, could be YAML, JSON, CSV, STDIN, ARGS(Default)'
  c.option '-p', '--port <port file>', String, 'Port of the sensor'
  c.option '-o', '--output_format <format>', String, 'Output format, could be YAML, JSON (default), CSV'
  c.option '-O', '--output <output file>', String, 'Output file, could be STDOUT'
  c.action do |args, options|
    options.default input_format: :args, port: :auto, output_format: :json, output: :stdout

    recorder = Recorder.new
    
    case options.input_format.downcase.to_sym
    when :args, :""
      recorder.commands args
    when :yaml
      safe_load_file args.first do |input_file|
        recorder.commands YAML.load_file input_file
      end
    when :json
      safe_load_file args.first do |input_file|
        recorder.commands JSON.load File.open(input_file, 'r')
      end
    when :csv
      safe_load_file args.first do |input_file|
        recorder.commands File.read(input_file).split(',').map{|s| s.strip!}
      end
    when :stdin
      safe_input do
        data = ask("Commands", Array)
        recorder.commands data
      end
    else      
      abort 'Invalid input format'.light_red
    end

    case options.port.downcase.to_sym
    when :auto
      port = detect_port

      puts "Sensor detected at #{port.light_yellow}".light_white

      recorder.port = port
    else
      ensure_port(options.port) do |port|
        recorder.port = port
      end
    end

    begin
      recorder.record
    rescue
      abort 'Error occurs during recording'.light_red
    end

    puts "Recoding completed\n".light_green

    puts "Generating output...".light_white

    generate_output = proc do |stream|
      case options.output_format.downcase.to_sym
      when :yaml
        stream.puts recorder.records.to_yaml      
      when :json
        stream.puts recorder.records.to_json
      when :csv
        csv = CSV.new stream, headers: %w[command type code length]
      
        recorder.records.each do |k, record|
          csv << [k, record.type, record.code, record.length]
        end    
      else
        abort 'Invalid output format'.light_red   
      end    
    end

    case options.output.downcase.to_sym
    when :stdout
      safe_generation $stdout, &generate_output      
    else      
      File.open options.output, 'w' do |file|
        safe_generation file, &generate_output
      end
    end
  end
end

command :verify do |c|
  c.syntax = "irrecorder verify [options] record_file"
  c.summary = 'Verify the keys recorded'
  c.description = <<-END
      Verify the keys recorded
      A output file should be provided
  END
  # c.example 'Load from YAML', "irrecorder"
  c.option '-i', '--input_format <format>', String, 'Input format, could be YAML, JSON (default), CSV (SUPPORT SOON)'
  c.option '-p', '--port <port file>', String, 'Port of the sensor'  
  c.action do |args, options|
    options.default input_format: :json, port: :auto

    verifier = Verifier.new
    
    case options.input_format.downcase.to_sym    
    when :yaml
      safe_load_file args.first do |input_file|
        verifier.commands = YAML.load_file input_file
      end
    when :json
      safe_load_file args.first do |input_file|        
        verifier.commands = JSON.load File.open(input_file, 'r')
      end
    when :csv
      safe_load_file args.first do |input_file|
        # verifier.commands = File.read(input_file).split(',').map{|s| s.strip!}
        abort "NOT YET SUPPORTED".light_red
      end
    else      
      abort 'Invalid input format'.light_red
    end

    case options.port.downcase.to_sym
    when :auto
      port = detect_port

      puts "Sensor detected at #{port.light_yellow}".light_white

      verifier.port = port
    else
      ensure_port(options.port) do |port|
        verifier.port = port
      end
    end

    begin
      puts 'Start Verify'.light_yellow

      report = verifier.verify
    rescue
      abort 'Error occurs during verifying'.light_red
    end
      

    puts '', 'Result: '.light_white
      
    report.each do |key, result|      
      print key.to_s.light_yellow, ': '.light_white
      if result
        print 'Verified'.light_green
      else
        print 'Mismatch'.light_red
      end
      print "\r\n"
    end    
  end
end

command :reveal do |c|
  c.syntax = "irrecorder reveal [options]"
  c.summary = 'Display the ir command recieved'
  c.description = <<-END
      Reveal the ir command recieved      
  END
  # c.example 'Load from YAML', "irrecorder"  
  c.option '-p', '--port <port file>', String, 'Port of the sensor'  
  
  c.action do |args, options|
    options.default port: :auto

    revealer = Revealer.new    
        
    case options.port.downcase.to_sym
    when :auto
      port = detect_port

      puts "Sensor detected at #{port.light_yellow}".light_white

      revealer.port = port
    else
      ensure_port(options.port) do |port|
        revealer.port = port
      end
    end

    # begin      
      revealer.reveal
    # rescue
    #   abort 'Error occurs during revealing'.light_red
    # end
  end
end

module Helper
  def safe_load_file(file)    
    abort "File #{file} doesn't exists".light_red unless File.exists?(file)

    yield file
  rescue
    abort "Error occurs while loading #{file}".light_red
  end

  def safe_input
    yield
  rescue
    puts "Input error\n".light_red
    retry
  end

  def detect_port(pattern = '/dev/*.usb*')
    port = Dir[pattern].first

    abort('No sensor is detected'.light_red) if port.nil?

    port
  end

  def ensure_port(port)
    abort "Port #{port} doesn't exists".light_red unless File.exists?(port)

    yield port
  end

  def safe_generation(io)
    yield io
  rescue    
    abort "Error occurs during generation".light_red
  end
end

extend Helper