#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'json'
require 'csv'
require 'pry'
require 'serialport'
require 'colorize'
require_relative 'lib/irrecorder'

program :version, '0.0.1'
program :description, 'Infrared sequence recorder'

default_command :record

command :record do |c|
  c.syntax = "irrecorder keys [options]"
  c.summary = 'Config keys to be recorded'
  c.description = <<-END
      Config keys to be recorded
      The keys could be enter follow command or load from files or standard input
  END
  # c.example 'Load from YAML', "irrecorder"
  c.option '-i', '--input_format <format>', String, 'Input format, could be YAML, JSON, CSV, STDIN, ARGS'
  c.option '-p', '--port <port file>', String, 'Port of the sensor'
  c.option '-o', '--output_format <format>', String, 'Output format, could be YAML, JSON, CSV'
  c.option '-O', '--output <output file>', String, 'Output file, could be STDOUT'
  c.action do |args, options|
    options.default input_format: :args, port: :auto, output_format: :yaml, output: :stdout

    recorder = Recorder.new
    
    case options.input_format.downcase.to_sym
    when :args
      recorder.commands args
    when :yaml
      safe_load_file args.first do |input_file|
        recorder.commands YAML.load_file input_file
      end
    when :json
      safe_load_file args.first do |input_file|
        recorder.commands JSON.parse File.open(input_file, 'r')
      end
    when :csv
      safe_load_file args.first do |input_file|
        recorder.commands File.read(input_file).split(',').map{|s| s.strip!}
      end
    when :stdin
      safe_input do
        data = ask("Commands", Array)
        recorder.commands data
      end
    else      
      abort 'Invalid input format'.light_red
    end

    case options.port.downcase.to_sym
    when :auto
      port = detect_port

      puts "Sensor detected at #{port.light_yellow}".light_white

      recorder.port = port
    else
      ensure_port(options.port) do |port|
        recorder.port = port
      end
    end

    begin
      recorder.record
    rescue
      abort 'Error occurs during recording'.light_red
    end

    puts "Recoding completed\n".light_green

    puts "Generating output...".light_white

    generate_output = proc do |stream|
      case options.output_format.downcase.to_sym
      when :yaml
        stream.puts recorder.records.to_yaml      
      when :json
        stream.puts recorder.records.to_json
      when :csv
        csv = CSV.new stream, headers: %w[command type value size]
      
        recorder.records.each do |k, record|
          csv << [k, record.type, record.value, record.size]
        end    
      else
        abort 'Invalid output format'.light_red   
      end    
    end

    case options.output.downcase.to_sym
    when :stdout
      safe_generation $stdout, &generate_output      
    else      
      File.open options.output, 'w' do |file|
        safe_generation file, &generate_output
      end
    end
  end
end

module Helper
  def safe_load_file(file)    
    abort "File #{file} doesn't exists".light_red unless File.exists?(file)

    yield file
  rescue
    abort "Error occurs while loading #{file}".light_red
  end

  def safe_input
    yield
  rescue
    puts "Input error\n".light_red
    retry
  end

  def detect_port(pattern = '/dev/*.usb*')
    port = Dir[pattern].first

    abort('No sensor is detected'.light_red) if port.nil?

    port
  end

  def ensure_port(port)
    abort "Port #{port} doesn't exists".light_red unless File.exists?(port)

    yield port
  end

  def safe_generation(io)
    yield io
  rescue    
    abort "Error occurs during generation".light_red
  end
end

extend Helper